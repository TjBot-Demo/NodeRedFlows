[{ "id": "ebee01cd.44752", "type": "comment", "z": "636042fd.e5048c", "name": "Inital Config of TJBot", "info": "", "x": 110, "y": 40, "wires": [] }, { "id": "209024b3.1b947c", "type": "inject", "z": "636042fd.e5048c", "name": "Startup", "topic": "", "payload": "Startup", "payloadType": "str", "repeat": "", "crontab": "", "once": true, "x": 104, "y": 164, "wires": [
        ["45b326e6.7b8748", "72995133.6dfe2"]
    ] }, { "id": "45b326e6.7b8748", "type": "exec", "z": "636042fd.e5048c", "command": "ifconfig eth0", "addpay": false, "append": "", "useSpawn": "false", "timer": "", "oldrc": false, "name": "eth0", "x": 310, "y": 100, "wires": [
        ["9606a89b.9ae528"],
        [],
        []
    ] }, { "id": "bceb80e.f55c88", "type": "debug", "z": "636042fd.e5048c", "name": "Ip", "active": true, "console": "false", "complete": "payload", "x": 650, "y": 20, "wires": [] }, { "id": "9606a89b.9ae528", "type": "function", "z": "636042fd.e5048c", "name": "Extract eth0", "func": "// Initialize variables\nvar input, tokens, inet, bcast, mask;\nvar eth0 =   {\n    \"ip\" : null, \n    \"bcast\" : null, \n    \"mask\" : null\n}\n\n// Parse the entire string by spaces, and put each item into an array called tokens\ninput = msg.payload;\ntokens = input.split(\":\", 10);\nmsg.tokenstest = tokens;\n\n// Get the 7th token (example: \"addr:192.168.0.120\")\n// and get the substring from character 6 to the end\ninet = tokens[7].split(\" \", 1);\neth0.ip = inet[0];\n\n// Get the 8th token (example: \"Bcast:192.168.0.255\")\n// and get the substring from character 7 to the end\nbcast = tokens[8].split(\" \", 1);\neth0.bcast = bcast[0];\n\n// Get the 9th token (example: \"Mask:255.255.255.0\")\n// and get the substring from character 6 to the end\nmask = tokens[9].split(\" \", 1);\neth0.mask = mask[0].slice(0,mask[0].length-1);\n\n// Don't send a message if the IF is the known default. Change to default ip.\nif (inet==\"192.168.0.120\") { \n    //outString = \"\"; // set output to null if ip is the same so no message is sent\n    msg.payload = \"NoIp\";\n}else{\n    // return the final output\n    msg.payload = eth0.ip;\n}\n\nmsg.eth0 = eth0;\n\nreturn msg;\n", "outputs": 1, "noerr": 0, "x": 490, "y": 80, "wires": [
        ["bceb80e.f55c88", "25c6ff26.0bc2d"]
    ] }, { "id": "d4ac8fb3.80738", "type": "rpi-sensehat out", "z": "636042fd.e5048c", "name": "", "x": 839, "y": 357.5, "wires": [] }, { "id": "1917b710.bd7449", "type": "inject", "z": "636042fd.e5048c", "name": "", "topic": "", "payload": "surprised", "payloadType": "str", "repeat": "", "crontab": "", "once": false, "x": 128, "y": 621, "wires": [
        ["7b9615f7.bfd32c"]
    ] }, { "id": "7b9615f7.bfd32c", "type": "function", "z": "636042fd.e5048c", "name": "SenseHAT", "func": "// get the Images\nvar senseHATImages = global.get(\"senseHATImages\");\nvar loop = true;\nvar sImage = \"\";\nvar image = [];\n\n// get the right image \nfor (var i = 0; i < senseHATImages.length && loop; i++) {\n    // set the image to be displayed\n    if (senseHATImages[i].name == msg.payload) {\n        loop = false;\n        sImage = senseHATImages[i].sImage;\n        image = senseHATImages[i].image;\n    }\n}\n\nmsg.payload = sImage;\nmsg.image = image;\nmsg.speed = 5;\n\nreturn msg;", "outputs": 1, "noerr": 0, "x": 349, "y": 677, "wires": [
        ["6e66198d.51faf8"]
    ] }, { "id": "6e66198d.51faf8", "type": "rpi-sensehat out", "z": "636042fd.e5048c", "name": "", "x": 543, "y": 678, "wires": [] }, { "id": "ee6cdc58.827ac", "type": "inject", "z": "636042fd.e5048c", "name": "", "topic": "", "payload": "smily", "payloadType": "str", "repeat": "", "crontab": "", "once": false, "x": 137, "y": 661, "wires": [
        ["7b9615f7.bfd32c"]
    ] }, { "id": "52361c22.cb7954", "type": "inject", "z": "636042fd.e5048c", "name": "", "topic": "", "payload": "frusty", "payloadType": "str", "repeat": "", "crontab": "", "once": false, "x": 136, "y": 701, "wires": [
        ["7b9615f7.bfd32c"]
    ] }, { "id": "d7f7b319.8c64e", "type": "inject", "z": "636042fd.e5048c", "name": "", "topic": "", "payload": "nutreal", "payloadType": "str", "repeat": "", "crontab": "", "once": false, "x": 137, "y": 741, "wires": [
        ["7b9615f7.bfd32c"]
    ] }, { "id": "72995133.6dfe2", "type": "exec", "z": "636042fd.e5048c", "command": "hostname", "addpay": false, "append": "", "useSpawn": "", "timer": "", "name": "hostname", "x": 320, "y": 160, "wires": [
        ["e971a609.9f8ae8"],
        [],
        []
    ] }, { "id": "e971a609.9f8ae8", "type": "function", "z": "636042fd.e5048c", "name": "extract", "func": "msg.payload = msg.payload.slice(0,msg.payload.length-1);\n\nglobal.set(\"device\", msg.payload);\n\nreturn msg;", "outputs": 1, "noerr": 0, "x": 490, "y": 140, "wires": [
        ["edc7c2c3.1d40b"]
    ] }, { "id": "fbb5c51c.673ad8", "type": "change", "z": "636042fd.e5048c", "name": "Loop Init", "rules": [{ "t": "set", "p": "loop", "pt": "flow", "to": "0", "tot": "num" }], "action": "", "property": "", "from": "", "to": "", "reg": false, "x": 193, "y": 415, "wires": [
        ["9e4654ca.59d228"]
    ] }, { "id": "9e4654ca.59d228", "type": "switch", "z": "636042fd.e5048c", "name": "", "property": "loop", "propertyType": "flow", "rules": [{ "t": "lt", "v": "3", "vt": "num" }, { "t": "else" }], "checkall": "true", "outputs": 2, "x": 368, "y": 415, "wires": [
        ["b46929c7.40f0d8"],
        []
    ] }, { "id": "2a73f642.61c59a", "type": "function", "z": "636042fd.e5048c", "name": "Increase", "func": "var count = flow.get('loop') || 0;\ncount += 1;\nflow.set('loop', count);\n\nreturn msg;", "outputs": 1, "noerr": 0, "x": 450, "y": 358, "wires": [
        ["9e4654ca.59d228", "e37e27ac.9c6db8"]
    ] }, { "id": "1e59febb.e496a1", "type": "link out", "z": "636042fd.e5048c", "name": "Show IP", "links": ["e5fd5e81.d0399"], "x": 1355, "y": 60, "wires": [] }, { "id": "e5fd5e81.d0399", "type": "link in", "z": "636042fd.e5048c", "name": "", "links": ["1e59febb.e496a1"], "x": 51, "y": 415, "wires": [
        ["fbb5c51c.673ad8"]
    ] }, { "id": "b46929c7.40f0d8", "type": "delay", "z": "636042fd.e5048c", "name": "Wait", "pauseType": "delay", "timeout": "12", "timeoutUnits": "seconds", "rate": "1", "nbRateUnits": "1", "rateUnits": "second", "randomFirst": "1", "randomLast": "5", "randomUnits": "seconds", "drop": false, "x": 537, "y": 409, "wires": [
        ["2a73f642.61c59a"]
    ] }, { "id": "e37e27ac.9c6db8", "type": "function", "z": "636042fd.e5048c", "name": "HAT Msg", "func": "var hostname = global.get(\"device\") || \"\";\nvar ip = global.get(\"IP\");\nvar rotation = global.get(\"rotation\");\n\nif (rotation) {\n    msg.payload = rotation + \"\\n\" + hostname + \" : \" + ip.ip;\n} else {\n    msg.payload = hostname + \" : \" + ip.ip;\n}\nmsg.speed = 4;\n\nreturn msg;", "outputs": 1, "noerr": 0, "x": 652, "y": 357, "wires": [
        ["d4ac8fb3.80738", "68ceff0.be903"]
    ] }, { "id": "edc7c2c3.1d40b", "type": "debug", "z": "636042fd.e5048c", "name": "Hostsname", "active": true, "console": "false", "complete": "payload", "x": 670, "y": 140, "wires": [] }, { "id": "d681c3e6.1204a", "type": "comment", "z": "636042fd.e5048c", "name": "Show local IP - 3 Times", "info": "", "x": 136, "y": 353, "wires": [] }, { "id": "a9a16286.de773", "type": "function", "z": "636042fd.e5048c", "name": "Set Globals", "func": "var ip = \"NO-IP\";\nif (msg.eth0.ip.length > 0) {\n    global.set(\"IP\", msg.eth0);\n    ip = msg.eth0.ip;\n} else {\n    if (msg.wlan0.ip.length > 0) {\n        global.set(\"IP\", msg.wlan0);\n        ip = msg.wlan0.ip;\n    }\n}\nvar url = \"http://\" + ip + \":1880\";\n\nglobal.set(\"appurl\", url);\nglobal.set(\"sendIoTF\", true);\nglobal.set(\"gender\", \"male\");\nglobal.set(\"location\", \"Linz\");\nglobal.set(\"rotation\",\"R270\");\n\n\nreturn msg;", "outputs": 1, "noerr": 0, "x": 1030, "y": 60, "wires": [
        ["2d92cba7.bad9f4"]
    ] }, { "id": "f945c9a4.233008", "type": "inject", "z": "636042fd.e5048c", "name": "no light", "topic": "", "payload": "no_light", "payloadType": "str", "repeat": "", "crontab": "", "once": false, "x": 120, "y": 784, "wires": [
        ["7b9615f7.bfd32c"]
    ] }, { "id": "ccce4f06.a9925", "type": "inject", "z": "636042fd.e5048c", "name": "red light", "topic": "", "payload": "red_light", "payloadType": "str", "repeat": "", "crontab": "", "once": false, "x": 119, "y": 828, "wires": [
        ["7b9615f7.bfd32c"]
    ] }, { "id": "2341d54c.c6f3ea", "type": "inject", "z": "636042fd.e5048c", "name": "Blue light", "topic": "", "payload": "blue_light", "payloadType": "str", "repeat": "", "crontab": "", "once": false, "x": 98, "y": 883, "wires": [
        ["7b9615f7.bfd32c"]
    ] }, { "id": "e5f51b8e.b96038", "type": "comment", "z": "636042fd.e5048c", "name": "SenseHAT Demo", "info": "", "x": 120, "y": 560, "wires": [] }, { "id": "2d92cba7.bad9f4", "type": "function", "z": "636042fd.e5048c", "name": "Def. SenseHAT", "func": "var senseHATImages = [];\nvar rotation = global.get(\"rotation\");\n\nvar sHImage = {\n    \"name\" : \"weather\",\n    \"image\" : [ \n        \"y\",\"y\",\"y\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"y\",\"y\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"y\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"w\",\"w\",\"e\",\"e\",\"e\",\"e\",\n        \"e\",\"w\",\"e\",\"e\",\"w\",\"e\",\"e\",\"e\",\n        \"w\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"e\",\"w\",\"e\",\"e\",\"w\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"w\",\"w\",\"e\",\"e\",\"e\",\"e\"\n        ],\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nvar sHImage = {\n    \"name\" : \"no_light\",\n    \"image\" : [ \n        \"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"e\",\"x\",\"x\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"x\",\"e\",\"e\",\"x\",\"e\",\"e\",\n        \"e\",\"x\",\"e\",\"e\",\"e\",\"e\",\"x\",\"e\",\n        \"e\",\"x\",\"e\",\"e\",\"e\",\"e\",\"x\",\"e\",\n        \"e\",\"e\",\"x\",\"e\",\"e\",\"x\",\"e\",\"e\",\n        \"e\",\"e\",\"e\",\"x\",\"x\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"e\",\"x\",\"x\",\"e\",\"e\",\"e\"\n        ],\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nvar xx_light = [ \n\"?\",\"e\",\"e\",\"?\",\"?\",\"e\",\"e\",\"?\",\n\"e\",\"?\",\"e\",\"x\",\"x\",\"e\",\"?\",\"e\",\n\"e\",\"e\",\"x\",\"e\",\"e\",\"x\",\"e\",\"e\",\n\"?\",\"x\",\"e\",\"e\",\"e\",\"e\",\"x\",\"?\",\n\"e\",\"x\",\"e\",\"e\",\"e\",\"e\",\"x\",\"e\",\n\"e\",\"?\",\"x\",\"e\",\"e\",\"x\",\"?\",\"e\",\n\"?\",\"e\",\"e\",\"x\",\"x\",\"e\",\"e\",\"?\",\n\"e\",\"e\",\"e\",\"x\",\"x\",\"e\",\"e\",\"e\"\n];\n\n// define the possible lights \nvar red_light = xx_light.slice();\nvar blue_light = xx_light.slice();\nvar yellow_light = xx_light.slice();\nvar white_light = xx_light.slice();\nvar green_light = xx_light.slice();\nfor (var y = 0; y < 8; y++) {\n    for (var x = 0; x < 8; x++) {\n        if (xx_light[y*8+x] == \"?\") {\n            red_light[y*8+x] = \"r\";         \n            blue_light[y*8+x] = \"b\";         \n            green_light[y*8+x] = \"g\";         \n            white_light[y*8+x] = \"w\";         \n            yellow_light[y*8+x] = \"y\";         \n        } else {\n            red_light[y*8+x] = xx_light[y*8+x];         \n            blue_light[y*8+x] = xx_light[y*8+x];         \n            green_light[y*8+x] = xx_light[y*8+x];         \n            white_light[y*8+x] = xx_light[y*8+x];         \n            yellow_light[y*8+x] = xx_light[y*8+x];         \n        }\n    }\n}\n\nsHImage = {\n    \"name\" : \"red_light\",\n    \"image\" :  red_light,\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"green_light\",\n    \"image\" :  green_light,\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"yellow_light\",\n    \"image\" :  yellow_light,\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"blue_light\",\n    \"image\" :  blue_light,\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"white_light\",\n    \"image\" :  white_light,\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\n    \nsHImage = {\n    \"name\" : \"smily\",\n    \"image\" :  [ \n        \"o\",\"o\",\"o\",\"e\",\"e\",\"o\",\"o\",\"o\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"w\",\"b\",\"w\",\"e\",\"e\",\"w\",\"b\",\"w\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"e\",\"e\",\"e\",\"y\",\"y\",\"e\",\"e\",\"e\",\n        \"r\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"r\",\n        \"e\",\"r\",\"r\",\"r\",\"r\",\"r\",\"r\",\"e\",\n        \"e\",\"e\",\"e\",\"r\",\"r\",\"e\",\"e\",\"e\"\n        ],\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"frusty\",\n    \"image\" :  [ \n        \"o\",\"o\",\"o\",\"e\",\"e\",\"o\",\"o\",\"o\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"w\",\"b\",\"w\",\"e\",\"e\",\"w\",\"b\",\"w\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"e\",\"e\",\"e\",\"y\",\"y\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"e\",\"r\",\"r\",\"r\",\"r\",\"r\",\"r\",\"e\",\n        \"r\",\"r\",\"e\",\"e\",\"e\",\"e\",\"r\",\"r\"\n        ],\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"surprised\",\n    \"image\" :  [ \n        \"o\",\"o\",\"o\",\"e\",\"e\",\"o\",\"o\",\"o\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"w\",\"b\",\"w\",\"e\",\"e\",\"w\",\"b\",\"w\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"e\",\"e\",\"e\",\"y\",\"y\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"r\",\"r\",\"r\",\"r\",\"e\",\"e\",\n        \"e\",\"e\",\"r\",\"e\",\"e\",\"r\",\"e\",\"e\",\n        \"e\",\"e\",\"r\",\"r\",\"r\",\"r\",\"e\",\"e\"\n        ],\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"nutreal\",\n    \"image\" :  [ \n        \"o\",\"o\",\"o\",\"e\",\"e\",\"o\",\"o\",\"o\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"w\",\"b\",\"w\",\"e\",\"e\",\"w\",\"b\",\"w\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"e\",\"e\",\"e\",\"y\",\"y\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"e\",\"r\",\"r\",\"r\",\"r\",\"r\",\"r\",\"e\",\n        \"e\",\"e\",\"r\",\"r\",\"r\",\"r\",\"e\",\"e\"\n        ],\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\n// convert all the images to a SenseHAT string\nfor (var i = 0; i < senseHATImages.length; i++) {\n    var sImage = \"\";\n    var first = true;\n    for (var y = 0; y < 8; y++) {\n        for (var x = 0; x < 8; x++) {\n            if (first === true) {\n                sImage = \"\";\n                if (rotation) {\n                    sImage = rotation + \"\\n\";\n                }\n                sImage = sImage + x + \",\" + y;\n                first = false;\n            } else {\n                sImage = sImage + \",\" + x + \",\" + y;\n            }\n            switch (senseHATImages[i].image[y*8+x]) {\n                case \"r\":\n                    sImage = sImage + \",red\";\n                    break;\n                case \"g\":\n                    sImage = sImage + \",green\";\n                    break;\n                case \"b\":\n                    sImage = sImage + \",blue\";\n                    break;\n                case \"y\":\n                    sImage = sImage + \",yellow\";\n                    break;\n                case \"p\":\n                    sImage = sImage + \",purple\";\n                    break;\n                case \"m\":\n                    sImage = sImage + \",magenta\";\n                    break;\n                case \"l\":\n                    sImage = sImage + \",oldlace\";\n                    break;\n                case \"o\":\n                    //sImage = sImage + \",210,105,30\";\n                    sImage = sImage + \",orange\";\n                    break;\n                case \"i\":\n                    sImage = sImage + \",pink\";\n                    break;\n                case \"x\":\n                    sImage = sImage + \",192,192,192\";\n                    break;\n                case \"w\":\n                    sImage = sImage + \",white\";\n                    break;\n                default:\n                    sImage = sImage + \",off\";\n                    break;\n            }    \n        }\n    }\n    senseHATImages[i].sImage = sImage;\n}\n\n// save Images to global\nglobal.set(\"senseHATImages\", senseHATImages);\n    \nreturn msg;", "outputs": 1, "noerr": 0, "x": 1220, "y": 60, "wires": [
        ["1e59febb.e496a1"]
    ] }, { "id": "68ceff0.be903", "type": "debug", "z": "636042fd.e5048c", "name": "", "active": false, "console": "false", "complete": "false", "x": 830, "y": 440, "wires": [] }, { "id": "25c6ff26.0bc2d", "type": "exec", "z": "636042fd.e5048c", "command": "ifconfig wlan0", "addpay": false, "append": "", "useSpawn": "false", "timer": "", "oldrc": false, "name": "wlan0", "x": 670, "y": 80, "wires": [
        ["df431bda.f371e"],
        [],
        []
    ] }, { "id": "df431bda.f371e", "type": "function", "z": "636042fd.e5048c", "name": "Extract wlan0", "func": "// Initialize variables\nvar input, tokens, inet, bcast, mask;\nvar wlan0 = {\n    \"ip\" : null,\n    \"bcast\" : null, \n    \"mask\" : null\n}\n\n// Parse the entire string by spaces, and put each item into an array called tokens\ninput = msg.payload;\ntokens = input.split(\":\", 10);\nmsg.tokenstest = tokens;\n\n// Get the 7th token (example: \"addr:192.168.0.120\")\n// and get the substring from character 6 to the end\ninet = tokens[7].split(\" \", 1);\nwlan0.ip = inet[0];\n\n// Get the 8th token (example: \"Bcast:192.168.0.255\")\n// and get the substring from character 7 to the end\nbcast = tokens[8].split(\" \", 1);\nwlan0.bcast = bcast[0];\n\n// Get the 9th token (example: \"Mask:255.255.255.0\")\n// and get the substring from character 6 to the end\nmask = tokens[9].split(\" \", 1);\nwlan0.mask = mask[0].slice(0,mask[0].length-1);\n\n// Don't send a message if the IF is the known default. Change to default ip.\nif (inet==\"192.168.0.120\") { \n    //outString = \"\"; // set output to null if ip is the same so no message is sent\n    msg.payload = \"NoIp\";\n}else{\n    // return the final output\n    msg.payload = wlan0.ip;\n}\n\nmsg.wlan0 = wlan0;\n\nreturn msg;\n", "outputs": 1, "noerr": 0, "x": 840, "y": 60, "wires": [
        ["a9a16286.de773"]
    ] }]